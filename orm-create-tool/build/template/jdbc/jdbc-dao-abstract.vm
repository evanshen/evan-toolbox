package ${outputor.packageName}.repository.impl;

#set($className=$outputor.className)
#set($objectName=$outputor.objectName)
#set($tableName=$outputor.tableName)
#set($param=$outputor.param)
#set($columnNotPks=$outputor.columnNotPks)
#set($columns=$outputor.columns)
#set($columnPks=$outputor.columnPks)
#set($pkParams=$outputor.pkParams) 

#macro(getColumnValue $colName)
#if("${colName}"=="GMT_CREATE"||"${colName}"=="GMT_MODIFY")
"+jdbcDao.getSysDate()+"##
#elseif("${colName}"=="${param.deletedTagColumn}")
'$param.deletedTagValueNo'##
#else?#end
#end

#macro(setBeanValueCode $columns)
	${className} o = new ${className}();
				
	#foreach($column in $columns)
		#set($dataType=${column.dataType})
		#if("$dataType"=="Integer" || "$dataType"=="BigDecimal" || "$dataType"=="Long" || "$dataType"=="Double" ) 
			o.set${column.fieldNameFirstCharUpcase}(JdbcUtils.getResultSet${dataType}(rs,"${column.columnName}"));
		#else		
			#if("$dataType"=="Date") #set($dataType="Timestamp") #end						
			o.set${column.fieldNameFirstCharUpcase}(rs.get${dataType}("${column.columnName}"));
		#end
	#end
#end

#macro(getPkFields $objectName)	
    #if($pkCount>1) new Object[]{#end##
    #foreach($columnPK in $columnPks)##
    	#if($foreach.count > 1),#end ${objectName}.get${columnPK.fieldNameFirstCharUpcase}()##
    #end## 
	#if($pkCount>1)}#end##
#end

#set($pkWhere="")
#set($pkSqlParams="")
#foreach($columnPK in $columnPks)##
	#if($foreach.count > 1)
		#set($pkWhere="$pkWhere and")##	
		#set($pkSqlParams="${pkSqlParams},")##	
	#end
	#set($pkWhere="$pkWhere ${columnPK.columnName}=?")##
	#set($pkSqlParams="${pkSqlParams} $columnPK.fieldName")##	
#end##

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.StringUtils;
import org.evanframework.domain.PageResult;
import org.evanframework.domain.query.PageParameter;
import org.evanframework.domain.query.QueryParameter;
import org.evanframework.orm.jdbc.JdbcDao;
import org.evanframework.orm.jdbc.JdbcPageSqlWrapper;
import org.evanframework.orm.jdbc.JdbcQuerySqlWrapper;
import org.evanframework.orm.jdbc.JdbcSqlFromAndWhereCreator;
import org.evanframework.orm.jdbc.JdbcUtils;
import org.evanframework.orm.jdbc.JdbcSqlWhereBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

/**
*$!{outputor.comment}
*/
@SuppressWarnings({ "rawtypes", "unchecked" })
public abstract class ${className}AbstractDao implements ${className}Dao{
##extends ${outputor.baseDaoName} 
	private static final String DEFAULT_SQL_COLUMNS = ##
		"#foreach($column in $outputor.columns)#if($foreach.count>1),#end${objectName}.${column.columnName}#end";
	
	@Autowired
	protected JdbcTemplate jdbcTemplate;

	@Autowired
	private JdbcDao jdbcDao;
	
	private static final String DEFAULT_SORT = "${objectName}.GMT_CREATE desc";
	
	/**
	 * 添加对象
	 */
	#if($outputor.pkCount == 1)	
	public Long insert(${className} po) {		
		StringBuilder sqlCols = new StringBuilder(1024);	
		StringBuilder sqlValues = new StringBuilder(1024);		
		
		sqlCols.append("${outputor.pkColumnNames}");
		sqlValues.append("SEQ_${tableName}.nextval");
		
		List values = new ArrayList();
		
		#foreach($column in $columnNotPks)
			#if("${column.columnName}"=="GMT_CREATE"||"${column.columnName}"=="GMT_MODIFY")				
				sqlCols.append(",${column.columnName}");
				sqlValues.append("," + jdbcDao.getSysDate());				
			#elseif("${column.columnName}"=="${param.deletedTagColumn}")
				sqlCols.append(",${column.columnName}");
				sqlValues.append(",'0'");
			#else	
				JdbcUtils.appandSqlForInsert(po.get${column.fieldNameFirstCharUpcase}(),values,sqlCols,",${column.columnName}",sqlValues,",#getColumnValue(${column.columnName})");			
			#end
		#end
		
		final String sql = "insert into ${tableName} ("+sqlCols+") values ("+sqlValues+")";	
	
		final List<Serializable> values2 = values;
		
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update(new PreparedStatementCreator() {

			@Override
			public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
				PreparedStatement ps = con.prepareStatement(sql, new String[] {"${outputor.pkColumnNames}"});					
				JdbcUtils.setPreparedStatementFromValues(ps, values2);
						
				return ps;
			}
		}, keyHolder);

		return keyHolder.getKey().longValue();
	}
	#else
	public void insert(${className} po) {
		String sql = "insert into ${tableName}(#foreach($column in $columns)#if($foreach.count!=1),#end${column.columnName}#end)"
			+ "values (#foreach($column in $columns)#if($foreach.count!=1),#end#getColumnValue(${column.columnName})#end)";
		
		#set($c=0)
		#foreach($column in $columns)
			#if("${column.columnName}"!="GMT_CREATE"&&"${column.columnName}"!="GMT_MODIFY"&&"${column.columnName}"!="${param.deletedTagColumn}")
				#set($c=$c + 1)
			#end
		#end
		
		Object[] params = new Object[$c];
		
		#set($i=0)
		#foreach($column in $columns)
			#if("${column.columnName}"!="GMT_CREATE"&&"${column.columnName}"!="GMT_MODIFY"&&"${column.columnName}"!="${param.deletedTagColumn}")
				params[$i] = po.get${column.fieldNameFirstCharUpcase}();
				#set($i=$i + 1)
			#end
		#end
		
		jdbcTemplate.update(sql, params);
	}
	#end

	/**
	 * 根据主键修改
	 */
	public void update(${className} po) {		
		List listParams = new ArrayList();
		StringBuilder sqlCols = new StringBuilder(512);

		#foreach($column in $columnNotPks)
			#if("${column.columnName}"=="GMT_MODIFY")
				sqlCols.append(",GMT_MODIFY=" + jdbcDao.getSysDate());
			#elseif("${column.columnName}"!="GMT_CREATE"
				&&"${column.columnName}"!="${param.deletedTagColumn}"
				&&"${column.columnName}"!="${param.statusColumn}")
				JdbcUtils.appandSql(sqlCols, listParams, po.get${column.fieldNameFirstCharUpcase}(), ",${column.columnName}=?");
			#end
		#end 	
		
		if (sqlCols.length() > 0) {
			sqlCols.delete(0, 1);
			String sql = "update ${tableName}  set " + sqlCols + " where $pkWhere ";			
			listParams.add(#getPkFields("po"));
			jdbcTemplate.update(sql.toString(), listParams.toArray());
		}
	}

	#*if($outputor.pkCount == 1)	
	/**
	 * 根据多个主键修改，多个主键以","分割,如:33,334,555 
	 */
	public void updateByPks(${className} po, String idsStr) {
		List listParams = new ArrayList();
		StringBuilder sql = getSqlUpdateColumn(po, listParams);

		if (sql.length() > 0) {
			sql.append(" where ${outputor.pkColumnNames} in (" + idsStr + ")");
			jdbcTemplate.update(sql.toString(), listParams.toArray());
		}
	}
	#end*#	

	/**
	 * 根据主键获取单个对象
	 */	
	public ${className} load($pkParams) {	
		String sql = " select * from ${tableName} where $pkWhere";
		return jdbcTemplate.query(sql.toString(),new Object[]{$pkSqlParams}, new ${className}ResultSet());
	}
	
	/**
	 * 列表查询
	 */
	public List<${className}> queryList(${className}Query query) {
		JdbcSqlQueryWrapper wrapper = JdbcUtils.createSqlQueryWrapper(${className}.class, DEFAULT_SQL_COLUMNS, query, DEFAULT_SORT,
				new ${className}SqlFromAndWhere(), new ${className}RowDefaultMap());

		return jdbcDao.queryList(wrapper.getSqlData(), query, wrapper.getRowMapper(), wrapper.getParams());
	}

	#*/**
	 * 列表查询
	 */
	public List<Map<String, Object>> queryListForMap(QueryParameter queryParameter, String... dynamicColumn) {
		//生成select语句的列
		String sqlColumns = JdbcUtils.getSqlColumns(dynamicColumn, DEFAULT_SQL_COLUMNS);
		//包装Sql语句
		JdbcQuerySqlWrapper jdbcQuerySqlWrapper = JdbcUtils.createQuerySqlWrapper(sqlColumns, queryParameter, DEFAULT_SORT, new ${className}SqlFromAndWhere());
		//执行Sql
		return jdbcTemplate.queryForList(jdbcQuerySqlWrapper.getSqlData(), jdbcQuerySqlWrapper.getParams());
	}*#

		/**
	 * 分页查询
	 */
	public PageResult<${className}> queryPage(${className}Query query) {
		JdbcSqlQueryWrapper wrapper = JdbcUtils.createSqlQueryWrapper(${className}.class, DEFAULT_SQL_COLUMNS, query, DEFAULT_SORT,
				new ${className}SqlFromAndWhere(), new ${className}RowDefaultMap());

		return jdbcDao.queryPage(wrapper.getSqlData(), wrapper.getSqlCount(), query, wrapper.getRowMapper(), wrapper.getParams());
	}

	#*
	/**
	 * 分页查询
	 */
	public PageResult<Map<String, Object>> queryPageForMap(PageParameter pageParameter, String... dynamicColumn) {
		//生成select语句的列
		String sqlColumns = JdbcUtils.getSqlColumns(dynamicColumn, DEFAULT_SQL_COLUMNS);
		//包装Sql语句
		JdbcPageSqlWrapper jdbcPageSqlWrapper = JdbcUtils.createPageSqlWrapper(sqlColumns, pageParameter,DEFAULT_SORT,  new ${className}SqlFromAndWhere());
		//执行Sql
		return jdbcDao.queryPageForMap(jdbcPageSqlWrapper, null);
	}*#
	
	#*/**
	 * 根据主键逻辑删除
	 */
	public void updateIsDeleted($pkParams) {
		String sql = " update ${tableName} set ${param.deletedTagColumn}='$param.deletedTagValueYes' where $pkWhere";		
		jdbcTemplate.update(sql.toString(), $pkSqlParams);
	}*#	
	
	/**
	 * 根据主键物理删除
	 */
	public void delete($pkParams) {
		String sql ="delete from ${tableName} where $pkWhere";		
		jdbcTemplate.update(sql.toString(), $pkSqlParams);
	}
	
	/**
	 * 根据主键修改状态
	 */
	public void updateStatus($pkParams,String status) {
		String sql ="update ${tableName} set ${param.statusColumn}=? where $pkWhere";		
		jdbcTemplate.update(sql.toString(),status,$pkSqlParams);
	}
	
	private class ${className}SqlFromAndWhere implements JdbcSqlFromAndWhereCreator2<${className}Query> {
		public void create(${className}Query query, JdbcSqlFromAndWhereWrapper builder) {
			String sqlFrom = "from ${tableName} ${objectName}";

			#foreach($column in $outputor.columns)
				#set($dataType=${column.dataType})
        		#set($length=${column.length})
				#set($fieldName=${column.fieldName})			
				#set($columnName=${column.columnName})	
				#set($fieldNameFirstCharUpcase=${column.fieldNameFirstCharUpcase})				
    			#if($column.isPk=="1")					
        		#else
            		#if(${fieldName}=="status")
    					
					#elseif("$dataType"=="BigDecimal")
						builder.append("and ${objectName}.${columnName} >= ? ",query.get${fieldNameFirstCharUpcase}From());
						builder.append("and ${objectName}.${columnName} <= ? ",query.get${fieldNameFirstCharUpcase}To());
					#elseif("$dataType"=="Integer" || "$dataType"=="Long" )   
						builder.append("and ${objectName}.${columnName} = ? ",query.get${fieldNameFirstCharUpcase}());											
                    #elseif("$dataType"=="Date")
						builder.append("and ${objectName}.${columnName} >= ? ",query.get${fieldNameFirstCharUpcase}From());
						builder.append("and ${objectName}.${columnName} < ? + 1 ",query.get${fieldNameFirstCharUpcase}To());
					#elseif("$dataType"=="String" && $length > 32)
						builder.append("and ${objectName}.${columnName} like ? ", query.get${fieldNameFirstCharUpcase}(), LikeType.FULL);					
					#else	
            			builder.append("and ${objectName}.${columnName}=? ", query.get${fieldNameFirstCharUpcase}());	
        			#end		
        		#end
			#end

			if (builder.isNotEmpty()) {
				builder.replace(0, 3, " where");
			}

			builder.insert(0, sqlFrom);
		}
	}
	
	private class ${className}ResultSet implements ResultSetExtractor<${className}> {
		@Override
		public ${className} extractData(ResultSet rs) throws SQLException, DataAccessException {
			if (rs.next()) {
				#setBeanValueCode($columns)				
				
				return o;
			} else {
				return null;
			}
		}
	}
	
	private class ${className}RowDefaultMap implements RowMapper<${className}> {
		@Override
		public ${className} mapRow(ResultSet rs, int rowNum) throws SQLException {
			#setBeanValueCode($columns)
			
			return o;
		}
	}

	#*
	#if($outputor.pkCount == 1)
	/**
	 * 根据多个主键逻辑删除,多个主键以","分割,如:33,334,555 <br>	
	 */
	public void updateIsDeletedByPks(String idsStr) {
		String sql = "update ${tableName} set ${param.deletedTagColumn}='$param.deletedTagValueYes' where ${outputor.pkColumnNames} in(" + idsStr + ")";
		jdbcTemplate.update(sql.toString());
	}	

	/**
	 * 根据多个主键物理删除,多个主键以","分割,如:33,334,555 <br>	
	 */
	public void deleteByPks(String idsStr) {
		String sql = "delete from ${tableName} where ${outputor.pkColumnNames} in(" + idsStr + ")";
		jdbcTemplate.update(sql.toString());
	}
	
	/**
	 * 根据多个主键修改状态
	 */
	public void updateStatus(String idsStr,String status) {
		String sql ="update ${tableName} set ${param.statusColumn}=? where ${outputor.pkColumnNames} in(" + idsStr + ")";		
		jdbcTemplate.update(sql.toString(),status);
	}
	#end
	*#
}
package test.${outputor.packageName}.repository;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;

#set($className=${outputor.className})
#set($objectName=$outputor.objectName)

public class ${className}MapperTest extends MySQLTestCaseSupport   {
	private static final Logger log = LoggerFactory.getLogger(${className}Mapper.class);

	@Autowired
	private ${className}Mapper ${objectName}Mapper;

	@Test
	public void testInsert() {
		${className} ${objectName} = new ${className}();

		${objectName}Mapper.insert(${objectName});
		log.info("=======>> testInsert " + ${objectName});
	}

	@Test
	public void testUpdateById() {
		${className} ${objectName} = new ${className}();

		${objectName}.setId(RandomUtils.nextLong(1,5));

		${objectName}Mapper.updateById(${objectName});
	}

	@Test
	public void testUpdate() {
		${className} ${objectName} = new ${className}();

		UpdateWrapper<${className}> updateWrapper = new UpdateWrapper();
		//updateWrapper.set("field_radio", 2);
		//updateWrapper.eq("id", RandomDataUtil.randomLong(1000));

		${objectName}Mapper.update(${objectName}, updateWrapper);
	}

##	@Test
##	public void testUpdateStatus() {
##		${objectName}Mapper.updateStatus(RandomUtils.nextLong(1,5), 2);
##	}
##
##	@Test
##	public void testUpdateIsDeleted() {
##		${objectName}Mapper.updateIsDeleted(RandomUtils.nextLong(1,5), 1);
##	}

	@Test
	public void testDeleteById() {
		${objectName}Mapper.deleteById(RandomUtils.nextLong(1,5));
	}

##	@Test
##	public void testDelete() {
##		${objectName}Mapper.delete(1L);
##	}

	@Test
	public void testSelectById() {
		${className} ${objectName} = ${objectName}Mapper.selectById(RandomUtils.nextLong(1,5));
		log.info("=======>> testSelectById " + ${objectName});
	}

	@Test
	public void testSelectBatchIds() {
		List idList = new ArrayList();
		idList.add(RandomUtils.nextLong(1,60));
		idList.add(RandomUtils.nextLong(1,80));
		List<${className}> demos = ${objectName}Mapper.selectBatchIds(idList);

		log.info(">>>> testSelectBatchIds({})={}", idList, demos);
	}

	@Test
	public void testQueryList() {
		${className}QueryDTO query = new ${className}QueryDTO();

		List<${className}> list =  ${objectName}Mapper.queryList(query);

        log.info("=======>> testQueryList " + list);
	}

	@Test
	public void testQueryCount() {
		${className}QueryDTO query = new ${className}QueryDTO();

		int count = ${objectName}Mapper.queryCount(query);

        log.info("=======>> testQueryCount " + count);
	}

	@Test
	public void testQueryForPage() {
		${className}QueryDTO query = new ${className}QueryDTO();

		PageResult<${className}> pageResult = ${objectName}Mapper.queryPage(query);

		log.info(">>>> testQueryForPage:" + pageResult);
   }
}